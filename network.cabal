name:           network
version:        2.6.2.1
license:        BSD3
license-file:   LICENSE
maintainer:     Johan Tibell <johan.tibell@gmail.com>
synopsis:       Low-level networking interface
description:
  This package provides a low-level networking interface.
  .
  In network-2.6 the @Network.URI@ module was split off into its own
  package, network-uri-2.6. If you're using the @Network.URI@ module
  you can automatically get it from the right package by adding this
  to your .cabal file:
  .
  > flag network-uri
  >   description: Get Network.URI from the network-uri package
  >   default: True
  >
  > library
  >   -- ...
  >   if flag(network-uri)
  >     build-depends: network-uri >= 2.6, network >= 2.6
  >   else
  >     build-depends: network-uri < 2.6, network < 2.6
  .
  That is, get the module from either network < 2.6 or from
  network-uri >= 2.6.
category:       Network
build-type:     Custom
cabal-version:  >=1.8
extra-tmp-files:
  config.log config.status autom4te.cache network.buildinfo
  include/HsNetworkConfig.h
extra-source-files:
  README.md CHANGELOG.md
  examples/*.hs tests/*.hs config.guess config.sub install-sh
  configure.ac configure network.buildinfo.in
  include/HsNetworkConfig.h.in include/HsNet.h include/HsNetworkConfigWin.h
  -- C sources only used on some systems
  cbits/ancilData.c cbits/asyncAccept.c cbits/initWinSock.c
  cbits/winSockErr.c
homepage:       https://github.com/haskell/network
bug-reports:    https://github.com/haskell/network/issues

library
  exposed-modules:
    Network
    Network.BSD
    Network.Socket
    Network.Socket.ByteString
    Network.Socket.ByteString.Lazy
    Network.Socket.Internal
  other-modules:
    Network.Socket.ByteString.Internal
    Network.Socket.Types

  if !os(windows)
    other-modules:
      Network.Socket.ByteString.IOVec
      Network.Socket.ByteString.Lazy.Posix
      Network.Socket.ByteString.MsgHdr
    install-includes: HsNetworkConfig.h
  else
    other-modules:
      Network.Socket.ByteString.Lazy.Windows
	-- fixed configuration on Windows without MSYS
	-- todo: actually detect MSYS here
    cpp-options: -DCALLCONV=stdcall -DWINVER=0x0501 -DBUILDING_ON_WINDOWS
    cc-options: -DCALLCONV=stdcall -DWINVER=0x0501 -DBUILDING_ON_WINDOWS
    c-sources: cbits/initWinSock.c, cbits/winSockErr.c, cbits/asyncAccept.c
    extra-libraries: ws2_32 	
    install-includes: HsNetworkConfigWin.h

  build-depends:
    base >= 3 && < 5,
    bytestring < 0.11

  if !os(windows)
    build-depends:
      unix >= 2

  extensions:
    CPP, DeriveDataTypeable, ForeignFunctionInterface, TypeSynonymInstances
  include-dirs: include
  includes: HsNet.h
  install-includes: HsNet.h
  c-sources: cbits/HsNet.c
  ghc-options: -Wall -fwarn-tabs

test-suite simple
  hs-source-dirs: tests
  main-is: Simple.hs
  type: exitcode-stdio-1.0

  build-depends:
    base < 5,
    bytestring,
    HUnit,
    network,
    test-framework,
    test-framework-hunit

test-suite regression
  hs-source-dirs: tests
  main-is: Regression.hs
  type: exitcode-stdio-1.0

  build-depends:
    base < 5,
    bytestring,
    HUnit,
    network,
    test-framework,
    test-framework-hunit

  ghc-options: -Wall

source-repository head
  type:     git
  location: git://github.com/haskell/network.git
